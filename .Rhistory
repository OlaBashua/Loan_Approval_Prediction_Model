library(tidyverse)
#load loan predicition dataset
Customer_loan <- read.csv('customer_loan')
#load loan predicition dataset
Customer_loan <- read.csv('customer_loan.csv')
#load loan predicition dataset
Customer_loan <- read.csv('Customer_loan.csv')
#load loan predicition dataset
Customer_loan <- read.csv('Customer_loan.csv')
# To view  data structure
str(Customer_loan)
#check for missing values
sum(is.na(Customer_loan))
head(Customer_loan, 10)
View(Customer_loan)
View(Customer_loan)
View(Customer_loan)
View(Customer_loan)
View(Customer_loan)
summary(Customer_loan)
head(Customer_loan, 10)
View(Customer_loan)
# To view  data structure
glimpse(Customer_loan)
View(Customer_loan)
install.packages('dlookr')
library(dlookr)
library(dlookr)
Customer_loan %>% group_by() %>% describe() %>% view()
install.packages('janitor')
library(janitor)
#check for missing values
sum(is.na(Customer_loan))
# using the dlookr package to scurinize data
Customer_loan %>% group_by() %>% describe() %>% view()
# Visualize missing values
ggplot(customer_loan_data, aes(x = "", y = is.na(loan_status))) +
geom_bar(stat = "identity") +
labs(title = "Missing Values in Loan Status Column",
x = "",
y = "Count")
library(tidyverse)
library(dlookr)
library(janitor)
#load loan predicition dataset
Customer_loan <- read.csv('Customer_loan.csv')
# To view  data structure
glimpse(Customer_loan)
str(Customer_loan)
View(Customer_loan)
# using the dlookr package to scurinize data
Customer_loan %>% group_by() %>% describe() %>% view()
head(Customer_loan, 10)
summary(Customer_loan)
#check for missing values
sum(is.na(Customer_loan))
# Visualize missing values
ggplot(customer_loan_data, aes(x = "", y = is.na(loan_status))) +
geom_bar(stat = "identity") +
labs(title = "Missing Values in Loan Status Column",
x = "",
y = "Count")
# Visualize missing values
ggplot(Customer_loan, aes(x = "", y = is.na(loan_status))) +
geom_bar(stat = "identity") +
labs(title = "Missing Values in Loan Status Column",
x = "",
y = "Count")
# Visualize missing values
ggplot(Customer_loan, aes(x = "", y = is.na(loan_type))) +
geom_bar(stat = "identity") +
labs(title = "Missing Values in Loan Status Column",
x = "",
y = "Count")
#check for missing values
sum(is.na(Customer_loan))
#Calculating the Debt to income ratio and adding new column as Dti
refined_Data <- Customer_loan %>% mutate(Dti = debts/income)
View(Customer_loan)
View(refined_Data)
refined_Data %>% mutate(loan_decision_type = ifelse(loan_decision_type == 'denied',0,1))
refined_Data <- refined_Data %>% mutate(loan_decision_type = ifelse(loan_decision_type == 'Denied',0,1))
head(refined_Data)
#Calculating the Debt to income ratio and adding new column as Dti
refined_Data <- Customer_loan %>% mutate(Dti = debts/income)
refined_Data <- refined_Data %>% mutate(loan_decision_status = ifelse(loan_decision_type == 'Denied',0,1))
head(refined_Data)
#converting the loan_decision_status variable into a factor
refined_Data$loan_decision_status <- as.factor(refined_Data$loan_decision_status)
#checking the data type of the column
str(refined_Data$loan_decision_status)
head(Customer_loan_refined)
Customer_loan_refined <-refined_Data %>%  select(3,4,6,7,8,11,13,14)
head(Customer_loan_refined)
# Visualize loan decision status
ggplot(refined_Data, aes(x = factor(loan_decision_status), fill = factor(loan_decision_status))) +
geom_bar() +
labs(title = "Loan Decision Status",
x = "Loan Decision Status",
y = "Count",
fill = "Loan Decision Status")
mutate(across(c (gender, marital_status,occupation, loan_type), as.numeric())
Customer_loan_refined <- Customer_loan_refined %>% mutate(gender = factor(gender),
Customer_loan_refined <- Customer_loan_refined %>% mutate(gender = factor(gender),
marital_status = factor(marital_status),
occupation = factor(occupation),
loan_type = factor(loan_type)) %>%
mutate(across(c(gender, marital_status, occupation, loan_type), as.numeric))
head(Customer_loan_refined)
str(Customer_loan_refined)
library(dlookr)
library(tidyverse)
library(janitor)
#Encode ‘gender’, ‘marital_status’, ‘occupation’, and ‘loan_type’ as factors and then convert them into numeric
# encode categorical variables
customer_loan_refined <- customer_loan_refined %>%
mutate(gender = factor(gender),
marital_status = factor(marital_status),
occupation = factor(occupation),
loan_type = factor(loan_type)) %>%
mutate(across(c(gender, marital_status, occupation, loan_type), as.numeric))
Customer_loan_refined <-refined_Data %>%  select(3,4,6,7,8,11,13,14)
head(Customer_loan_refined)
#Encode ‘gender’, ‘marital_status’, ‘occupation’, and ‘loan_type’ as factors and then convert them into numeric
# encode categorical variables
customer_loan_refined <- customer_loan_refined %>%
mutate(gender = factor(gender),
marital_status = factor(marital_status),
occupation = factor(occupation),
loan_type = factor(loan_type)) %>%
mutate(across(c(gender, marital_status, occupation, loan_type), as.numeric))
#Encode ‘gender’, ‘marital_status’, ‘occupation’, and ‘loan_type’ as factors and then convert them into numeric
# encode categorical variables
customer_loan_refined <- customer_loan_refined %>%
mutate(gender = factor(gender),
marital_status = factor(marital_status),
occupation = factor(occupation),
loan_type = factor(loan_type)) %>%
mutate(across(c(gender, marital_status, occupation, loan_type), as.numeric))
#Encode ‘gender’, ‘marital_status’, ‘occupation’, and ‘loan_type’ as factors and then convert them into numeric
# encode categorical variables
Customer_loan_refined <- Customer_loan_refined %>%
mutate(gender = factor(gender),
marital_status = factor(marital_status),
occupation = factor(occupation),
loan_type = factor(loan_type)) %>%
mutate(across(c(gender, marital_status, occupation, loan_type), as.numeric))
str(Customer_loan_refined)
View(Customer_loan_refined)
#Building the model and dividing data into train and test sets and split ratio as 70:30
install.packages("caret")
library(caret)
X <- Customer_loan_refined %>%  select(-loan_decision_status)
Y <- Customer_loan_refined$loan_decision_status
set.seed(123)
refined_train <- createDataPartition(Y, p = 0.7, times = 1, list = FALSE)
X_train <- X[refined_train, ]
X_test <- X[-refined_train, ]
Y_train <- Y[refined_train]
Y_test <- X[-refined_train]
Scaled_set <- preProcess(X_train, method = c('center', 'scale'))
X_train_scaled <- predict(Scaled_set, X_train)
X_test_scaled <- predict(Scaled_set, X_test)
Y <- Customer_loan_refined$loan_decision_status
Pca_df <- prcomp(X_train [, 1:7], center = TRUE, scale. = TRUE, retx = TRUE)
Pca_df <- prcomp(X_train [, 1:7], center = TRUE, scale. = TRUE, retx = TRUE)
X_train_pca <- predict(Pca_df, X_train_scaled [, 1:7])
X_train_pca <- X_train_pca[, 1:2]
X_test_pca <- predict(Pca_df, X_test_scaled [, 1:7])
X_test_pca <- X_test_pca [, 1:2]
library(e1071)
model_data  <- naiveBayes(X_train_pca, Y_train)
Pred <- predict(model_data, X_test_pca)
confusionMatrix(Pred, Y_test)
Y_test <- Y[-refined_train]
Scaled_set <- preProcess(X_train, method = c('center', 'scale'))
X_train_scaled <- predict(Scaled_set, X_train)
X_test_scaled <- predict(Scaled_set, X_test)
Pca_df <- prcomp(X_train [, 1:7], center = TRUE, scale. = TRUE, retx = TRUE)
X_train_pca <- predict(Pca_df, X_train_scaled [, 1:7])
X_train_pca <- X_train_pca[, 1:2]
X_test_pca <- predict(Pca_df, X_test_scaled [, 1:7])
X_test_pca <- X_test_pca [, 1:2]
model_data  <- naiveBayes(X_train_pca, Y_train)
Pred <- predict(model_data, X_test_pca)
confusionMatrix(Pred, Y_test)
summary(model_data)
model_data  <- naiveBayes(X_train_pca, Y_train , data = Customer_loan_refined)
summary(model_data)
model_data  <- naiveBayes(X_train_pca, Y_train)
# Visualize the relationship between credit score and loan status
ggplot(refined_Data, aes(x = credit_score, fill = loan_decision_type)) +
geom_density(alpha = 0.5) +
labs(title = "Relationship between Credit Score and Loan_decision_type",
x = "Credit Score",
y = "Density",
fill = "Loan_decision_type")
# Visualize the relationship between debt-to-income ratio and loan status
ggplot(customer_loan_data, aes(x = Dti, fill = loan_decision_type)) +
geom_density(alpha = 0.5) +
labs(title = "Relationship between Debt-to-Income Ratio and Loan decision type",
x = "Debt-to-Income Ratio",
y = "Density",
fill = "Loan decision type")
# Visualize the relationship between debt-to-income ratio and loan status
ggplot(refined_Data, aes(x = Dti, fill = loan_decision_type)) +
geom_density(alpha = 0.5) +
labs(title = "Relationship between Debt-to-Income Ratio and Loan decision type",
x = "Debt-to-Income Ratio",
y = "Density",
fill = "Loan decision type")
# Visualizing  loan decision status
ggplot(refined_Data, aes(x = factor(loan_decision_status), fill = factor(loan_decision_status))) +
geom_bar() +
labs(title = "Loan Decision Status",
x = "Loan Decision Status",
y = "Count",
fill = "Loan Decision Status")
